package ca.pfv.spmf.welwindow;

import java.io.IOException;

import ca.pfv.spmf.algorithmmanager.AlgorithmManager;
import ca.pfv.spmf.algorithmmanager.DescriptionOfAlgorithm;
import ca.pfv.spmf.algorithmmanager.DescriptionOfParameter;
import ca.pfv.spmf.algorithms.frequentpatterns.aprioriTID_rare.AlgoAprioriTIDrare;
/* This file is copyright (c) 2008-2019 Philippe Fournier-Viger
* 
* This file is part of the SPMF DATA MINING SOFTWARE
* (http://www.philippe-fournier-viger.com/spmf).
* 
* SPMF is free software: you can redistribute it and/or modify it under the
* terms of the GNU General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option) any later
* version.
* 
* SPMF is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
* A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with
* SPMF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * This class is used to provide the description of a plugin algorithm
 * 
 * @see DescriptionOfAlgorithm
 * @see AlgorithmManager
 * @see PluginManager
 * @author Philippe Fournier-Viger
 */
public class DescriptionOfAlgoPlugin extends DescriptionOfAlgorithm {

	/** the plugin */
	Plugin plugin; 
	
	/**
	 * Default constructor
	 */
	public DescriptionOfAlgoPlugin(Plugin plugin){
		this.plugin = plugin;
	}

	@Override
	public String getName() {
		return plugin.getName();
	}

	@Override
	public String getAlgorithmCategory() {
		return plugin.getCategory();
	}

	@Override
	public String getURLOfDocumentation() {
		return plugin.getUrlOfDocumentation();
	}

	@Override
	public void runAlgorithm(String[] parameters, String inputFile, String outputFile) throws IOException {

		double minsup = getParamAsDouble(parameters[0]);

		AlgoAprioriTIDrare algo = new AlgoAprioriTIDrare();
		
		if (parameters.length >=2 && "".equals(parameters[1]) == false) {
			algo.setShowTransactionIdentifiers(getParamAsBoolean(parameters[1]));
		}
		
		algo.runAlgorithm(inputFile, outputFile, minsup);
		algo.printStats();
	}

	@Override
	public DescriptionOfParameter[] getParametersDescription() {

		
		DescriptionOfParameter[] parameters = new DescriptionOfParameter[2];
		parameters[0] = new DescriptionOfParameter("Minsup (%)", "(e.g. 0.6 or 60%)", Double.class, false);
		parameters[1] = new DescriptionOfParameter("Show transaction ids?", "(default: false)", Boolean.class, true);
		return parameters;
	}

	@Override
	public String getImplementationAuthorNames() {
		return plugin.getAuthor();
	}

	@Override
	public String[] getInputFileTypes() {
		return plugin.getInputFileTypes();
	}

	@Override
	public String[] getOutputFileTypes() {
		return plugin.getOutputFileTypes();
	}
	
}
